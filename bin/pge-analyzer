#!/usr/bin/env node
'use strict';

const summaryParser = require('../lib/summary-parser');
const intervalParser = require('../lib/interval-parser');

const printf    = require('printf');
const fs        = require('fs');
const logger    = require('@hughescr/logger').logger;
const _         = require('underscore');
const columnify = require('columnify');

const argv = require('optimist')
    .usage('Usage: $0 [-a] [-b <baseline territory>] [-m <miles_per_day>] [-c <Wh per mile>] <XML data filename>')
    .demand(1)
    .boolean('a')
    .alias('a', 'all-electric')
    .describe('a', 'Use the "all electric" baseline numbers -- specify this option if your heating is electric instead of gas')
    .default('b', 'X')
    .alias('b', 'baseline-territory')
    .describe('b', "Baseline territory ['P'..'Z'] from http://bit.ly/12kMV2l")
    .default('c', 380)
    .alias('c', 'Wh-per-mile')
    .describe('c', 'How many Wh per mile do you get')
    .default('m', 50)
    .alias('m', 'miles-per-day')
    .describe('m', 'How many electric car miles per day do you drive?')
    .alias('p', 'purchase-date')
    .describe('p', 'What date did you start plugging in your car?')
    .alias('S', 'summary')
    .describe('S', 'Summary bill data to obtain billing start/stop periods')
    .wrap(80)
    .argv;

function report(totals) {
    _.forEach(totals, (data, rate) => {
        logger.info(`Rate:  ${rate}`);

        const collapsedData = _.chain(data)
                            .groupBy((val, key) => key.split(' ')[0])
                            .mapObject(arr => _.reduce(arr, (memo, e) => ({ cost: memo.cost + e.cost, amount: memo.amount + e.amount, numDays: memo.numDays > e.numDays ? memo.numDays : e.numDays })))
                            .mapObject((val, key) => {
                                const costInDollars = val.cost    / (100 * 1000);
                                const amountInkWh   = val.amount  / 1000;
                                const amountInMWh   = amountInkWh / 1000;

                                let usageString = printf('%0.2f', amountInkWh) + 'kWh';
                                if(amountInkWh > 1000) {
                                    usageString = printf('%0.2f', amountInMWh) + 'MWh';
                                }

                                return {
                                    period: key,
                                    usage: `Usage: ${usageString} / ${printf('%0.2f', amountInkWh / (val.numDays * 24))}kW`,
                                    costInDollars: 'Cost: $' + printf('%0.2f', costInDollars),
                                    perkWh: 'Per kWh: $' + printf('%0.2f', costInDollars / amountInkWh),
                                    perDay: 'Per day: ' + printf('%0.2f', amountInkWh / val.numDays) + 'kWh / $' + printf('%0.2f', costInDollars / val.numDays),
                                };
                            })
                            .values()
                            .value();

        columnify(collapsedData, { showHeaders: false, columnSplitter: '    ' }).split('\n').forEach(line => logger.info(line));
    });
}

let summaryOrNoSummary;

if(argv.S) {
    summaryOrNoSummary = summaryParser(fs.createReadStream(argv.S));
} else {
    summaryOrNoSummary = Promise.resolve([]);
}

summaryOrNoSummary
.then(billing_periods => {
    return intervalParser(fs.createReadStream(argv._[0]), billing_periods, argv.a, argv.b);
})
.then(report)
.catch(err => {
    logger.error('Error:', err.stack);
});
