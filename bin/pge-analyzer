#!/usr/bin/env node

var pge_parse = require('../lib/pge-parse');
var printf = require('printf');

var argv = require('optimist')
    .usage('Usage: $0 [-a] [-b <baseline territory>] [-m <miles_per_day>] [-c <Wh per mile>] <XML data filename>')
    .demand(1)
    .boolean('a')
    .alias('a','all-electric')
    .describe('a','Use the "all electric" baseline numbers -- specify this option if your heating is electric instead of gas')
    .default('b', 'T')
    .alias('b','baseline-territory')
    .describe('b',"Baseline territory ['P'..'Z'] from http://bit.ly/12kMV2l")
    .default('c', 380)
    .alias('c','Wh-per-mile')
    .describe('c','How many Wh per mile do you get')
    .default('m', 50)
    .alias('m','miles-per-day')
    .describe('m','How many electric car miles per day do you drive?')
    .alias('p','purchase-date')
    .describe('p','What date did you start plugging in your car?')
    .alias('S','summary')
    .describe('S','Summary bill data to obtain billing start/stop periods')
    .wrap(80)
    .argv

var parser = pge_parse.PGEParser(
                        argv.a,
                        argv.b,
                        argv.c,
                        argv.m,
                        argv.p ? new Date(argv.p) : undefined
                    );

function report(totals)
{
    // Print out report
    for(var rate in totals)
    {
        data = totals[rate];
        util.puts("Rate: "+rate);
        for(var period in data)
        {
            sub_data = data[period];
            util.puts(period +
                "\tCost: $"+printf("%0.2f",sub_data.cost) +
                "\t Per kWh: $"+printf("%0.2f",sub_data.cost/sub_data.amount) +
                "\t Per day: $"+printf("%0.2f",sub_data.cost/sub_data.numDays) +
                "");
        }
    }
}

var details = parser.detailsParser(report);

if(argv.S)
{
    parser.summaryParser(function() { details.parseFile(argv._[0])}).parseFile(argv.S);
} else {
    details.parseFile(argv._[0]);
}

