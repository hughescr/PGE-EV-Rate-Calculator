#!/usr/bin/env node
'use strict';

const pge_parse = require('../lib/pge-parse');
const printf    = require('printf');
const fs        = require('fs');
const logger    = require('@hughescr/logger').logger;

const argv = require('optimist')
    .usage('Usage: $0 [-a] [-b <baseline territory>] [-m <miles_per_day>] [-c <Wh per mile>] <XML data filename>')
    .demand(1)
    .boolean('a')
    .alias('a', 'all-electric')
    .describe('a', 'Use the "all electric" baseline numbers -- specify this option if your heating is electric instead of gas')
    .default('b', 'X')
    .alias('b', 'baseline-territory')
    .describe('b', "Baseline territory ['P'..'Z'] from http://bit.ly/12kMV2l")
    .default('c', 380)
    .alias('c', 'Wh-per-mile')
    .describe('c', 'How many Wh per mile do you get')
    .default('m', 50)
    .alias('m', 'miles-per-day')
    .describe('m', 'How many electric car miles per day do you drive?')
    .alias('p', 'purchase-date')
    .describe('p', 'What date did you start plugging in your car?')
    .alias('S', 'summary')
    .describe('S', 'Summary bill data to obtain billing start/stop periods')
    .wrap(80)
    .argv;

const parser = pge_parse.PGEParser(
                        argv.a,
                        argv.b,
                        argv.c,
                        argv.m,
                        argv.p ? new Date(argv.p) : undefined
                    );

function report(totals)
{
    // Print out report
    for(const rate in totals)
    {
        const data = totals[rate];
        logger.info('Rate: ' + rate);
        for(const period in data)
        {
            const sub_data = data[period];
            logger.info(period +
                '\tCost: $' + printf('%0.2f', sub_data.cost) +
                '\t Per kWh: $' + printf('%0.2f', sub_data.cost / sub_data.amount) +
                '\t Per day: $' + printf('%0.2f', sub_data.cost / sub_data.numDays)
            );
        }
    }
}

const details = parser.detailsParser(report);

if(argv.S)
{
    const summaryParser = parser.summaryParser(() =>
    {
        const detailsStream = fs.createReadStream(argv._[0]);
        detailsStream.pipe(details);
    });

    const summaryStream = fs.createReadStream(argv.S);
    summaryStream.pipe(summaryParser);
}
else
{
    const detailsStream = fs.createReadStream(argv._[0]);
    detailsStream.pipe(details);
}

