#!/usr/bin/env node
'use strict';

const pge_parse   = require('../lib/pge-parse');

const printf      = require('printf');
const path        = require('path');

const app         = require('express')();
const compression = require('compression');
const serveStatic = require('serve-static');
const formidable  = require('formidable');
const loggers     = require('@hughescr/logger');
const loggerMW    = loggers.middleware;
const logger      = loggers.logger;

const serverPort = process.env.npm_package_config_port || 8080;

app.use(compression());

app.use(loggerMW);

app.use(serveStatic(path.join(__dirname, '..', 'public')));

function report(res, totals) {
    let response = '<html><head><link rel="stylesheet" href="main.css"></link></head><body>';
    // Print out report
    for(const rate in totals) {
        const data = totals[rate];
        response += '<div class="rate">Rate: ' + rate;
        for(const period in data) {
            const sub_data = data[period];
            response += '<div class="subtotal">' + period +
            printf('<div class="cost">Cost: <span class="money">$%0.2f</span></div>', sub_data.cost) +
            printf('<div class="perkwh">Per kWh: <span class="money">$%0.2f</span></div>', sub_data.cost / sub_data.amount) +
            printf('<div class="perday">Per day: <span class="money">$%0.2f</span></div>', sub_data.cost / sub_data.numDays) +
            '</div>';
        }
        response += '</div></body></html>';
    }
    res.status(200).send(response);
}

app.post('/upload', (req, res) => {
    const form = new formidable.IncomingForm();

    const argv = {};

    form.on('field', (name, value) => {
        argv[name] = value;
    });

    let parser = undefined;

    form.onPart = function(part) {
        // Part can be a form field, or a file
        if(!part.filename) {
            // let formidable handle all non-file parts
            form.handlePart(part);
            return;
        }

        if(!parser) {
            parser = pge_parse.PGEParser(
                argv.a,
                argv.b,
                argv.c,
                argv.m,
                argv.p ? new Date(argv.p) : undefined
            );
        }

        if(part.name == 'summary') {
            const summary = parser.summaryParser(() => {});
            part.pipe(summary);
        }

        if(part.name == 'details') {
            const details = parser.detailsParser(report.bind(null, res));
            part.pipe(details);
        }
    };

    form.parse(req);
});

app.listen(serverPort);

logger.info('Started server on port', serverPort);
